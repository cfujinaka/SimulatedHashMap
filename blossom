from linked_list import Node, LinkedList
from blossom_lib import flower_definitions

class HashMap:
  def __init__(self, size):
    self.array_size = size
    self.array = [LinkedList() for item in range(self.array_size)]
    return
  
#INTERNAL HASH FUNCTIONS
  
  def hash(self, key):
    key_bytes = key.encode()
    hash_code = sum(key_bytes)
    return hash_code
  
  def compress(self, hash_code):
    return hash_code % self.array_size
  
#EXTERNAL HASH FUNCTIONS
  
  def assign(self, key, value):
    array_index = self.compress(hash(key))
    payload = Node([key, value])
    list_at_array = self.array[array_index]
    for item in list_at_array:
      if item[0] == key:
        item[1] = value
        return
    list_at_array.insert(payload)
    return
  
  def retrieve(self, key):
    array_index = self.compress(hash(key))
    list_at_index = self.array[array_index]
    for item in list_at_index:
      if item[0] == key:
        return item[1]
    return None
  
#TEST CODE_________________________________
    
blossom = HashMap(14)
for flower in flower_definitions:
  blossom.assign(flower[0], flower[1])
print(blossom.retrieve('chrysanthemum'))
print(blossom.retrieve('tulip'))
blossom.assign('tulip', 'perfect love')
print(blossom.retrieve('tulip'))
